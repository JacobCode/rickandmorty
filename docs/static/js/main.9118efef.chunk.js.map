{"version":3,"sources":["components/Header.js","components/Card.js","components/CardList.js","components/Row.js","components/Episodes.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","searchQuery","handleChange","bind","assertThisInitialized","handleSubmit","event","setState","value","target","preventDefault","console","log","react_default","a","createElement","className","href","Component","Card","props","style","backgroundImage","image","backgroundSize","backgroundPosition","backgroundRepeat","name","species","gender","status","location","id","CardList","_ref","data","cardComponent","map","card","i","components_Card","key","Row","title","air_date","substr","toUpperCase","episode_val","Episodes","episodeData","episodeData2","episodeComponentOne","ep","components_Row","episode","episodeComponentTwo","ep2","Footer","totalCharacters","totalLocations","totalEpisodes","url","Math","floor","random","App","isLoading","_this2","axios","get","then","result","results","info","count","_this$state","components_Header","components_CardList","components_Episodes","components_Footer","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9118efef.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n// SCSS\nimport '../scss/Header.scss';\n\nclass Header extends Component {\n    constructor() {\n        super();\n        this.state = {\n            // initial query search (page 1)\n            searchQuery: '',\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    handleChange(event) {\n        this.setState({\n            value: event.target.value\n        });\n    }\n    handleSubmit(event) {\n        event.preventDefault();\n        this.setState({ searchQuery: this.state.searchQuery })\n        console.log(this.state.searchQuery)\n    }\n    render() {\n        return (\n            <div className=\"nav\">\n                <div className=\"logo\">\n                    <div className=\"image\">\n                    </div>\n                </div>\n                <div className=\"refresh\">\n                    <a href=\"/\">Refresh <i className=\"fas fa-sync-alt\"></i></a>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Header;","import React from 'react';\n\n// SCSS\nimport '../scss/Card.scss';\n\nconst Card = (props) => {\n    return (\n        <div className=\"card\">\n            \n            <div className=\"container\">\n                <div className=\"front\">\n                    <div className=\"content\">\n                        <div className=\"character_image\"\n                            style={{\n                                backgroundImage: \"url('\" + props.image + \"')\",\n                                backgroundSize: 'cover',\n                                backgroundPosition: 'center',\n                                backgroundRepeat: 'no-repeat'\n                            }}>\n                        </div>\n                        <div className=\"character_name\">\n                            <h3>{props.name}</h3>\n                        </div>\n                        <div className=\"character_type\">\n                            <span className=\"species\">{props.species}</span>\n                            /\n                            <span className=\"gender\">{props.gender}</span>\n                        </div>\n                    </div>\n                </div>\n                \n                <div className=\"back\">\n                    <div className=\"content\">\n                        <p><span>Name: </span>{props.name}</p>\n                        <p><span>Species: </span>{props.species}</p>\n                        <p><span>Gender: </span>{props.gender}</p>\n                        <p><span>Current Status: </span>{props.status}</p>\n                        <p><span>Last Location: </span>{props.location}</p>\n                        <span className=\"id\">id: {props.id}</span>\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nimport '../scss/CardList.scss';\n\nconst CardList = ({ data }) => {\n    const cardComponent = data.map((card, i) => {\n        return <Card key={data[i].id} image={data[i].image} name={data[i].name} species={data[i].species} gender={data[i].gender} status={data[i].status} location={data[i].location.name} id={data[i].id}/>\n    })\n    return (\n        <div className=\"card_list\">\n            {cardComponent}\n            {/* COMPONENT INSERT HERE */}\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\n// SCSS\nimport '../scss/Row.scss'\n\nconst Row = (props) => {\n    return (\n        <div className=\"row\">\n            {/* Episode title */}\n            <span className=\"title col-lg\"><h5>{props.title}</h5></span>\n            {/* Episode air date (year) */}\n            <span className=\"air_date col-sm\"><h5>{props.air_date.substr(0, 3).toUpperCase()} {props.air_date.substr(-4)}</h5></span>\n            {/* Episode value */}\n            <span className=\"episode_val col-sm\"><h5>{props.episode_val}</h5></span>\n            {/* Episode id */}\n            <span className=\"id col-sm\"><h5>{props.id}</h5></span>\n        </div>\n    )\n}\n\nexport default Row;","import React from 'react';\n\n// SCSS\nimport '../scss/Episodes.scss'\n\n// Components\nimport Row from './Row';\n\nconst Episodes = ({ episodeData, episodeData2 }) => {\n    const episodeComponentOne = episodeData.map((ep, i) => {\n        return <Row key={ep.id} title={ep.name} episode_val={ep.episode} air_date={ep.air_date} id={ep.id}/>\n    });\n    const episodeComponentTwo = episodeData2.map((ep2, i) => {\n        return <Row key={ep2.id} title={ep2.name} episode_val={ep2.episode} air_date={ep2.air_date} id={ep2.id}/>\n    })\n    return (\n        <div className=\"episodes_container\">\n            <div className=\"episode\">\n                <h1>Seasons 1-3</h1>\n                <div className=\"rows\">\n                    <div className=\"page page1\">\n                        {/* TITLES */}\n                        <div className=\"titles\">\n                            <h4 className=\"col-lg title\">Title</h4>\n                            <h4 className=\"col-sm air_date\">Air Date</h4>\n                            <h4 className=\"col-sm episode_val\">Episode</h4>\n                            <h4 className=\"col-sm id\">ID</h4>\n                        </div>\n                        {/* Page 1 episodes */}\n                        {episodeComponentOne}\n                    </div>\n                    <div className=\"page page2\">\n                        {/* TITLES */}\n                        <div className=\"titles\">\n                            <h4 className=\"col-lg title\">Title</h4>\n                            <h4 className=\"col-sm air_date\">Air Date</h4>\n                            <h4 className=\"col-sm episode_val\">Episode</h4>\n                            <h4 className=\"col-sm id\">ID</h4>\n                        </div>\n                        {/* Page 2 episodes */}\n                        {episodeComponentTwo}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Episodes;","import React from 'react';\n\n// SCSS\nimport '../scss/Footer.scss';\n\nconst Footer = (props) => {\n    return (\n        <div className=\"footer\">\n            <div className=\"left\">\n                <div className=\"info\">\n                    <div className=\"names\">\n                        <span className=\"name\">Characters</span>\n                        <span className=\"name\">Locations</span>\n                        <span className=\"name\">Episodes</span>\n                    </div>\n                    <div className=\"values\">\n                        <span className=\"value\">{props.totalCharacters}</span>\n                        <span className=\"value\">{props.totalLocations}</span>\n                        <span className=\"value\">{props.totalEpisodes}</span>\n                    </div>\n                </div>\n            </div>\n            <div className=\"right\">\n                <div className=\"links\">\n                    <a href=\"/\">Refresh Page</a>\n                    <a href=\"https://rickandmortyapi.com/\">Rick & Morty API</a>\n                    <a href=\"https://rickandmortyapi.com/documentation\">API Documentation</a>\n                    <a href=\"https://github.com/JacobCode/rickandmorty\">Source</a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport axios from 'axios';\n\n// SCSS\nimport './App.scss';\n\n// Components\nimport Header from './components/Header';\nimport CardList from './components/CardList';\nimport Episodes from './components/Episodes'\nimport Footer from './components/Footer';\n\n// Random number\nvar randomNum = Math.floor(Math.random() * 26);\n\n// Different pages containing characters (default page: 1)\nvar url = 'https://rickandmortyapi.com/api/character/?page=' + randomNum;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    // Set initial state\n    this.state = {\n      url: url,\n      data: [],\n      isLoading: true,\n      totalCharacters: 0,\n      totalLocations: 0,\n      totalEpisodes: 0,\n      episodeData: null,\n      episodeData2: null,\n    }\n  }\n\n  componentDidMount() {\n    this.setState({ isLoading: true });\n    // API call\n    axios.get(this.state.url)\n    .then(result => {\n      // Retrieve data then get character url\n      this.setState({ \n        data: result.data.results,\n      });\n      return axios.get('https://rickandmortyapi.com/api/character/');\n    })\n    .then((result) => {\n      // Set total location character then get location url\n      this.setState({\n        totalCharacters: result.data.info.count,\n      })\n      return axios.get('https://rickandmortyapi.com/api/location/');\n    })\n    .then((result) => {\n      // Set total location number then get episode url page 1\n      this.setState({\n        totalLocations: result.data.info.count,\n      })\n      return axios.get('https://rickandmortyapi.com/api/episode/');\n    })\n    .then(result => {\n      // Retrieve data then get character url\n      this.setState({\n        // Set total episode number then get episode url page 2\n        totalEpisodes: result.data.info.count,\n        episodeData: result.data.results,\n      })\n      return axios.get('https://rickandmortyapi.com/api/episode/?page=2');\n    })\n    .then(result => {\n      // Retrieve data then get character url\n      this.setState({\n        episodeData2: result.data.results,\n        isLoading: false\n      });\n    })\n  }\n\n  render() {\n    const {\n      data,\n      isLoading,\n      totalCharacters,\n      totalLocations,\n      totalEpisodes,\n      episodeData,\n      episodeData2,\n    } = this.state;\n\n    // While loading\n    if (isLoading) {\n      return ( \n        <div className=\"loading\">\n          <div className=\"gif\">\n\n          </div>\n        </div>\n      );\n    } else {\n      // Done loading\n      return (\n        <div className=\"App\">\n          <Header />\n          <CardList data={data} />\n          <Episodes episodeData={episodeData} episodeData2={episodeData2} />\n          <Footer totalCharacters={totalCharacters} totalLocations={totalLocations} totalEpisodes={totalEpisodes} />\n        </div>\n      );\n    }\n    \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// APP\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}